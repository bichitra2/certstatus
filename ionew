import io
import os
from ruamel.yaml import YAML
from yamllint import linter, config

# Function to format and clean YAML (remove extra spaces, correct indentation)
def format_yaml(yaml_string):
    yaml = YAML()
    yaml.preserve_quotes = True  # Preserve quotes as they are in the original YAML
    yaml.indent(mapping=2, sequence=4, offset=2)  # Set indentation rules

    try:
        # Load and parse the YAML string
        data = yaml.load(yaml_string)
    except Exception as e:
        raise ValueError(f"Syntax error in YAML: {e}")

    # Convert YAML back to string with proper formatting
    formatted_yaml = yaml.dump(data)

    # Remove trailing whitespaces from each line
    formatted_yaml = "\n".join([line.rstrip() for line in formatted_yaml.splitlines()])

    return formatted_yaml

# Function to check for duplicate keys
def check_duplicate_keys(yaml_string):
    yaml = YAML()
    yaml.allow_duplicate_keys = False  # Disallow duplicate keys
    try:
        yaml.load(yaml_string)
        return "No duplicate keys found."
    except Exception as e:
        return f"Duplicate key error: {e}"

# Function to lint YAML using yamllint for advanced checks
def run_yamllint(yaml_string):
    yamllint_config = """
    extends: default
    rules:
      line-length:
        max: 120  # Maximum line length
        allow-non-breakable-inline-mappings: true
      trailing-spaces: enable  # Ensure no trailing spaces
      indentation:
        spaces: 2  # Enforce 2-space indentation
    """
    
    config_obj = config.YamlLintConfig(yamllint_config)
    lint_issues = list(linter.run(yaml_string, config_obj))

    # Capture linting issues
    issues = [str(issue) for issue in lint_issues]

    return issues if issues else ["No linting issues found."]

# Main function to validate and format YAML using StringIO for buffer I/O
def check_and_format_yaml(file_path):
    if not os.path.exists(file_path):
        return f"File '{file_path}' does not exist."

    # Use io.StringIO to handle the YAML content from file
    try:
        with open(file_path, 'r') as file:
            yaml_content = file.read()
    except Exception as e:
        return f"Error reading the YAML file: {e}"

    buffer = io.StringIO(yaml_content)

    # Step 1: Check and format YAML content
    try:
        formatted_yaml = format_yaml(buffer.getvalue())
        print("YAML formatted successfully.")
    except Exception as e:
        return f"Error while formatting YAML: {e}"

    # Step 2: Reset the buffer and check for duplicate keys
    buffer.seek(0)  # Reset buffer to the beginning
    duplicate_check_result = check_duplicate_keys(buffer.getvalue())
    print(duplicate_check_result)

    # Step 3: Run yamllint for indentation, length, trailing space checks
    linting_issues = run_yamllint(buffer.getvalue())
    print("\nLinting issues:")
    for issue in linting_issues:
        print(issue)

    # Step 4: Save the formatted YAML back to the file
    with open(file_path, 'w') as file:
        file.write(formatted_yaml)

    return "All checks completed, and YAML formatted."

# Example usage
if __name__ == "__main__":
    file_path = 'example.yaml'  # Replace with your YAML file path
    result = check_and_format_yaml(file_path)
    print(result)
